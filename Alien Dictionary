Question :- https://www.geeksforgeeks.org/problems/alien-dictionary/1

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends

class Solution {
  public:
    string findOrder(vector<string> &words) {
        // code here
        vector<int> inDeg(26, 0);
        vector<vector<int>> adj(26);
        int n = words.size();
        int i = 0;
        unordered_set<char> st;
        for(auto & str : words){
            for(auto & it : str){
                st.insert(it);
            }
        }
        while(i < n-1){
            string a = words[i];
            string b = words[i+1];
            int j = 0;
            int k = 0;
            while(j < a.size() && k < b.size()){
                if(a[j] != b[k]) break;
                j++;
                k++;
            }
            if(j < a.size() && k == b.size()){
                return "";
            }
            if(j != a.size() && k != b.size()){
                int u = a[j] - 'a';
                int v = b[k] - 'a';
                adj[u].push_back(v);
                inDeg[v]++;
            }
            
            i++;
        }
        queue<int> q;
        vector<int> arr;
        for(int i=0; i<26; i++){
            if(inDeg[i] == 0){
                q.push(i);
                char ch = i + 'a';
                if(st.find(ch) != st.end()) arr.push_back(i);
            }
        }
        while(!q.empty()){
            int u = q.front();
            q.pop();
            for(auto & v : adj[u]){
                inDeg[v]--;
                if(inDeg[v] == 0){
                    q.push(v);
                    arr.push_back(v);
                }
            }
        }
        string s = "";
        for(auto & it : arr){
            char ch = it + 'a';
            if(st.find(ch) != st.end()) s += ch;
        }
        if(arr.size() != st.size()) return "";
        return s;
    }
};


//{ Driver Code Starts.

bool validate(const vector<string> &original, const string &order) {
    unordered_map<char, int> mp;
    for (const string &word : original) {
        for (const char &ch : word) {
            mp[ch] = 1;
        }
    }
    for (const char &ch : order) {
        if (mp.find(ch) == mp.end())
            return false;
        mp.erase(ch);
    }
    if (!mp.empty())
        return false;

    for (int i = 0; i < order.size(); i++) {
        mp[order[i]] = i;
    }

    for (int i = 0; i < original.size() - 1; i++) {
        const string &a = original[i];
        const string &b = original[i + 1];
        int k = 0, n = a.size(), m = b.size();
        while (k < n and k < m and a[k] == b[k]) {
            k++;
        }
        if (k < n and k < m and mp[a[k]] > mp[b[k]]) {
            return false;
        }
        if (k != n and k == m) {
            return false;
        }
    }
    return true;
}

int main() {
    string str;
    getline(cin, str);
    int t = stoi(str);
    while (t--) {
        getline(cin, str);
        stringstream ss(str);
        string curr;
        vector<string> words;
        while (ss >> curr)
            words.push_back(curr);

        vector<string> original = words;

        Solution ob;
        string order = ob.findOrder(words);

        if (order.empty()) {
            cout << "\"\"" << endl;
        } else {
            cout << (validate(original, order) ? "true" : "false") << endl;
        }
        cout << "~" << endl;
    }
    return 0;
}

// } Driver Code Ends
