Question :- https://leetcode.com/problems/rotting-oranges/description/

class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> visit(m, vector<int>(n, 0));
        queue<pair<int, int>> q;
        int oranges = 0;
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j] == 1) oranges++;
                if(grid[i][j] == 2){
                    q.push({i, j});
                    visit[i][j] = 1;
                } 
            }
        }
        if(oranges == 0) return 0;
        vector<pair<int, int>> dir = {{0, 1}, {1, 0}, {-1, 0}, {0, -1}};
        int time = 0;
        while(!q.empty()){
            int size = q.size();
            while(size){
                auto el = q.front();
                q.pop();
                int x = el.first;
                int y = el.second;
                for(auto it : dir){
                    int nx = x + it.first;
                    int ny = y + it.second;
                    if(nx >= 0 && nx < m && ny >= 0 && ny < n && visit[nx][ny] == 0 && grid[nx][ny] == 1){
                        oranges--;
                        visit[nx][ny] = 1;
                        q.push({nx, ny});
                    }
                }
                size--;
            }
            time++;
        }
        if(oranges != 0) return -1;
        return time-1;
    }
};
