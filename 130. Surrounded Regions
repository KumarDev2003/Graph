Question :- https://leetcode.com/problems/surrounded-regions/description/

class Solution {
public:
    void solve(vector<vector<char>>& board) {
        int m = board.size();
        int n = board[0].size();
        vector<vector<int>> visit(m, vector<int>(n, 0));
        queue<pair<int, int>> q;
        for(int i=0; i<m; i++){
            if(board[i][0] == 'O'){
                board[i][0] = '.';
                visit[i][0] = 1;
                q.push({i, 0});
            }
        }
        for(int i=0; i<m; i++){
            if(board[i][n-1] == 'O'){
                board[i][n-1] = '.';
                visit[i][n-1] = 1;
                q.push({i, n-1});
            }
        }
        for(int i=0; i<n; i++){
            if(board[0][i] == 'O'){
                board[0][i] = '.';
                visit[0][i] = 1;
                q.push({0, i});
            }
        }
        for(int i=0; i<n; i++){
            if(board[m-1][i] == 'O'){
                board[m-1][i] = '.';
                visit[m-1][i] = 1;
                q.push({m-1, i});
            }
        }
        vector<pair<int, int>> dir = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        while(!q.empty()){
            auto el = q.front();
            q.pop();
            int x = el.first;
            int y = el.second;
            for(auto it : dir){
                int nx = x + it.first;
                int ny = y + it.second;
                if(nx >= 0 && nx < m && ny >= 0 && ny < n && visit[nx][ny] == 0 && board[nx][ny] == 'O'){
                    visit[nx][ny] = 1;
                    board[nx][ny] = '.';
                    q.push({nx, ny});
                }
            }
        }

        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(board[i][j] == 'O') board[i][j] = 'X';
                if(board[i][j] == '.') board[i][j] = 'O';
            }
            cout<<endl;
        }
    }
};
