Question :- https://leetcode.com/problems/find-eventual-safe-states/description/

class Solution {
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        int n = graph.size();
        vector<vector<int>> adj(n);
        vector<int> inDeg(n, 0);
        for(int u=0; u<n; u++){
            for(auto & v : graph[u]){
                adj[v].push_back(u);
                inDeg[u]++;
            }
        }
        queue<int> q;
        stack<int> st;
        for(int i=0; i<n; i++){
            if(inDeg[i] == 0){
                q.push(i);
                st.push(i);
            }
        }
        while(!q.empty()){
            int u = q.front();
            q.pop();
            for(auto & v : adj[u]){
                inDeg[v] -= 1;
                if(inDeg[v] == 0){
                    q.push(v);
                    st.push(v);
                }
            }
        }
        vector<int> arr;
        while(!st.empty()){
            int node = st.top();
            st.pop();
            arr.push_back(node);
        }
        sort(arr.begin(), arr.end());
        return arr;
    }
};
